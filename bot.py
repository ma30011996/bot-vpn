from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv
import os

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(KeyboardButton("üî• –ü–æ–ª—É—á–∏—Ç—å VPN"))

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –≤—ã–¥–∞—ë—Ç –±—ã—Å—Ç—Ä—ã–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π VPN.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.",
        reply_markup=menu
    )

@dp.message_handler(lambda message: message.text == "üî• –ü–æ–ª—É—á–∏—Ç—å VPN")
async def get_key(message: types.Message):
    try:
        with open("keys.txt", "r") as f:
            keys = f.readlines()

        if not keys:
            await message.answer("–ö–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return

        key = keys[0].strip()
        with open("keys.txt", "w") as f:
            f.writelines(keys[1:])

        await message.answer(f"‚úÖ –í–æ—Ç —Ç–≤–æ–π –∫–ª—é—á:\n`{key}`", parse_mode="Markdown")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        print("–û—à–∏–±–∫–∞:", e)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)